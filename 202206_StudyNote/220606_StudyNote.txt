<2022.06.06일자 공부 기록>

1. 영단어 복습
	journey(여행, 여정, 항해, 길), journal(잡지, 학술지, 일기), juncture(연결점, 접합점, 시점), conjunction(결합, 연관, 접속사), join(연결하다, 가입하다, 합류하다),
	just(정확히, 딱, 그저), adjust(조정하다, 적응하다, 바로잡다), judge(판단하다, 평가하다), prejudice(편견, 선입견), kin(친척, 친족, 민족),
	kind(종류, 친절한), kindergarten(유치원), kidnap(납치하다, 유괴하다), labor(노동하다, 일하다, 애쓰다), laboratory(실험실, 연구실), elaborate(정성을 들인),
	collaborate(협력하다, 공동으로 하다), lave(씻다, 물에 담그다), lavatory(변기, 화장실, 세면대), laundry(세탁물, 빨랫감), relax(쉬다, 긴장을 풀다), relay(중계하다, 전달하다),
	delay(연기하다, 늦추다), release(풀다, 내보내다, 발표하다, 석방하다), collect(모으다, 수집하다), recollect(기억하다, 회상하다), elect(선출하다, 선택하다, 결정하다),
	neglect(무시하다, 방치하다), lecture(강의하다, 설교하다), legal(법적인, 법률상의), legislation(입법, 법률 제정, 법안), legitimate(합법적인, 정당한, 타당한), legacy(유산, 유물),
	lever(지레, 지렛대, 레버), alleviate(완화하다, 경감하다), elevate(들어 올리다, 승진시키다), relevant(관련 있는, 적절한), relieve(완화하다, 해소하다, 안도하게 하다), 
	liberal(자유로운, 자유주의의, 진보적인), liberate(자유롭게 하다, 해방하다), deliver(배달하다, 출산하다, 산출하다), delicate(연약한, 섬세한, 우아한), delicious(맛있는), 
	elicit(반응을 끌어내다), oblige(강요하다, 의무를 지게 하다, 베풀다), religion(종교, 신앙), liable(책임이 있는, ~할 것 같은), league(리그, 연합, 수준), rely(의지하다, 신뢰하다, 믿다),
	eliminate(없애다, 제거하다, 배제하다), preliminary(예비의, 준비의), limit(제한하다, 한정하다), line(선, 라인), airline(항공로, 항공사), deadline(기한, 마감일),
	outline(윤곽, 개요), language(언어, 말), linguist(여러 개 언어에 능통한 사람, 언어학자), bilingual(두 개 언어를 구사하는), literal(문자 그대로의, 문자의), 
	literate(글을 읽고 쓸 줄 아는, 박식한), literature(문학)


2. 학교 공부 복습
	<파이썬 프로그래밍>
	- 헷갈리는 것 모음
	1) 2차원 리스트부터는 각 리스트 요소마다 길이가 다를 수 있기 때문에 for문을 이용하여 출력할 때 주의해야 한다.

	2) 리스트와 다르게 튜플은 생성 이후 삽입, 수정, 삭제가 되지 않기 때문에 튜플에 사용할 수 있는 함수를 잘 파악해야 한다.
	-> index(), count(), len(), max(), min(), tuple() 함수 사용 가능

	3) 튜플의 내용 수정 시 리스트로 바꾼 후 수정한 후 다시 튜플로 바꾸는 방법도 있다.

	4) 딕셔너리는 키와 값을 반대로 생성해도 된다.(순서에 의미X)

	5) 딕셔너리에서 값은 중복 허용하지만 키는 중복 허용하지 않기 때문에 키값을 중복해서 넣게 될 경우
	마지막 키의 값이 저장된다.

	6) 딕셔너리 관련 함수
	-> dict.keys() : 딕셔너리에서 키값만 가져온다. 리스트로 반환받고 싶으면 list()함수 사용해야 함.
	-> dict.values() : 딕셔너리에서 데이터값만 가져온다. 위와 마찬가지로 리스트 반환 시 list()함수 필요
	-> dict.items() : 딕셔너리의 키와 값을 튜플 형태로 가져온다.
	-> dict.get(키값, 찾지 못할 때 반환값) : 딕셔너리에서는 키값을 이용해 데이터값을 가져올 때
	dict[키] 로 사용할 수도 있지만 get 함수를 사용하면 찾지 못했을 때 오류 처리를 할 수 있다.

	7) 딕셔너리 안에 키가 있는지 확인하기 위해 in 사용 가능
	ex) '이름' in dict

	8) 세트(set)는 키만 모아 놓은 딕셔너리의 특수 형태로, { } 괄호로 생성하지만 딕셔너리처럼 :(콜론)으로
	구분하지 않고 값을 입력한다.
	(키만 모여 있는 형태이기 때문에 중복을 허용하지 않는다.)

	9) 딕셔너리를 리스트로 변환하면 중복되지 않는 키값만 들어가게 된다.

	10) 리스트나 튜플을 set() 함수를 이용하여 집합으로 형변환한 후 출력해 보면 리스트나 튜플에서의
	중복되었던 값들은 제거가 된 상태로 들어간다.

	11) 함수에서 튜플을 매개변수로 받아서 처리할 때 *para와 같은 방식으로 사용한다.
	-> 참고로 * 표시를 붙여 튜플로 매개변수를 받는 것은 매개변수가 여러 개일 경우 마지막 매개변수에만
	사용할 수 있다.
	
	12) 딕셔너리를 매개변수로 받을 때에는 **para와 같이 **을 앞에 붙인다.

	13) 함수에서 반환값이 여러 개일 때, 해당 반환값만큼 받는 변수가 있으면 각각 값이 들어가게 되고,
	반환값을 받는 변수가 반환값보다 수가 적으면 나머지 반환값들은 튜플로 묶여 반환된다.






