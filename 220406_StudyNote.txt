<2022.04.06일자 공부 기록>
 
1. 영단어 외우기
	technique - 기법, 기술, 솜씨
	technically - 엄밀히 말하면, 기술적으로
	technology - (과학)기술, 공학
	detect - 발견하다, 감지하다
	protect - 보호하다
	temper - 기질, 성질, 누그러뜨리다
	temperate - 온화한, 온건한, 절제하는
	temperature - 온도, 기온
	tempt - 유혹하다, 부추기다
	attempt - 시도, 노력, 시도하다
	tentative - 잠정적인, 머뭇거리는
	tend - ~하는 경향이 있다, ~하기 쉽다, 돌보다
	tender - 다정한, 부드러운, 연약한
	attend - 참석하다, 돌보다
	contend - 투쟁하다, 주장하다, 겨루다
	extend - 뻗다, 연장하다
	intend - 의도하다, 작정하다
	pretend - ~인 척하다, 가장하다
	tense - 팽팽한, 긴장한
	term - 용어, 학기, 기간, 조건, 이름 짓다, 명명하다
	terminate - 끝나다, 종료하다
	determine - 결정하다, 알아내다, 밝히다
	terrace - 테라스, 작은 발코니
	terrain - 지역, 지형
	territory - 영토, 영역
	terrestrial - 지구의, 지상의



2. 학교 공부
	<창의적 사고와 코딩 과목(스크래치) 수업 내용, 22.04.06>

	- 비트맵
		> 확대하면 계단 현상 발생, 도화지에 그림 그리듯 벡터처럼 부분별로 나눌 수 없음.


	- 도형 방정식(벡터)
		> 확대해도 계단 현상X(원 그림 유지됨.)
		> 예를 들어 고양이 그림이 있으면 머리, 몸, 다리 등의 부분을 따로 나눌 수 있음.


	☆비트맵과 도형 방정식의 차이점 알아두기!


	- 추상화
		> 불필요한 디테일 제외, 핵심적 부분만 포함
		> 문제를 간단하게 모델링
		> 컴퓨터 공학에서는 이진수, 함수 등이 추상화의 일종.
		> ex) 지하철로 목적지에 가려는 사람은 지하철 노선만 필요함. 
 

	- 일반화
		> 여러 사물, 개념에서 공통되는 특성이나 속성 추출 -> (일반화된 개념)
		> ex) 강아지, 고양이 등..... -> 동물(일반적인 특성으로 판단)
 

	- 모델
		> 해결해야 하는 문제에 대한 일반적인 생각


	- 추상화의 장점
		> 문제에 대해 명확히 인식
		> 문제 해결의 일반적인 아이디어를 얻을 수 있음.
		> 이 과정에서 불필요한 세부사항 제거.(-> 필요한 것만 골라내어 일반화)
		> 문제의 개념 형성


	<C++ 프로그래밍 수업 내용, 22.04.06>

	- 객체 멤버(객체의 멤버변수 부분에 다른 객체를 넣을 수 있음)
	

	- 복사 생성자
		> 한 객체의 내용을 다른 객체로 복사하여 생성
		> 따로 정의하지 않으면 디폴트 복사 생성자가 생성됨(자신과 같은 타입의 객체를 매개 변수로 받음.)


	- 복사 생성자의 호출
		> 기존 객체내용 복사, 새로운 객체로 만드는 경우
		> 객체를 매개 변수로 전달하는 경우
		> 객체를 값으로 반환하는 경우


	- 객체의 동적 생성
		ex) Car *pCar = new Car();
		-> 포인터로 선언, new 키워드로 동적 생성
		-> 이렇게 선언하면 도트(.) 연산자가 아닌 -> 화살표로 멤버에 접근하게 됨.
		ex) pCar->speed


	- this 포인터
		> 현재 코드를 실행하는 객체를 가리키는 포인터
		ex) Car(int speed) { this.speed = speed; }


	- 정적 멤버
		> 인스턴스 변수(객체마다 하나씩 존재)
		> 정적 변수(static, 모든 객체 통틀어 하나만 존재)
		> 정적 변수의 초기화는 외부에서 해 줘야 함.
		ex) int Car::count = 0; (여기서 count는 Car 클래스의 static 변수)


	- 객체를 배열로도 사용 가능
		ex) Car objArr[2]; (Car 클래스를 2개 생성)
		ex) (objArr + 1) -> view(); 
		-> 포인터 형식으로도 멤버 호출 가능!

 

 

3. w3school HTML Tutorial 문서 정독(HTML Forms ~ HTML Input Form Attributes)