<2022.05.20일자 공부 기록>

1. 학교 공부 필기
	<알고리즘>
	- 그래프
		> 현상이나 사물을 정점과 간선으로 표현한 것
		> 두 정점이 간선으로 연결되엉 있으면 인접하다고 함(간선은 두 정점의 관계 표현)
		ex) 가중치를 표현/방향 표현한 그래프도 있음(둘 다 표기도 가능)


	- 인접행렬
		> 간선 그래프를 N * N 행렬로 표현
		> 연결되어 있으면 해당 자리값을 1로 표현, 아니면 0으로 표현(가중치가 존재하면 자리값을 가중치값으로 표현)
		> 방향이 존재하는 그래프는 간선의 방향에 따라 저장
		> 연결됨을 의미하는 자리값(1 또는 가중치)을 제외한 나머지 공간은 다 0 값을 넣기 때문에 메모리 낭비가 된다.
		> 장점(프로그램이 쉬움), 단점(불필요한 데이터가 많아 메모리 낭비)


	- 인접 리스트
		> N개의 연결 리스트로 표현
		> 인접행렬의 문제점(불필요한 데이터들) 해소
		> 메모리 낭비의 문제점이 해소되지만 프로그램이 어려움(메모리 관리의 어려움)


	- 인접 배열
		> N개의 연결 배열로 표현
		> i번째 배열은 정점 i에 인접한 정점들을 집합
		> 인접행렬과 인접 리스트의 장점을 취합했다.


	- 그래프에서 모든 정점 방문하기(★)
		> 너비우선탐색(BFS, Breadth-First Search)(큐 사용)
		> 깊이우선탐색(DFS, Depth-First Search)(스택 사용)


	- 너비우선탐색(BFS, Breadth-First Search)
		> 큐 사용, 현 위치에서 연결되어 있는 위치를 큐에 모두 넣는다.
		> 현 위치에서 더 이상 연결되어 있는 곳이 없으면 현 위치값(front)을 새로운 값으로 설정 후 다시 탐색
		(보통 큐에서 바로 다음 값을 front로 설정)


	- 깊이우선탐색(DFS, Depth-First Search)
		> 스택 사용, 현 위치에서 연결된 것 중 하나 선택하여 스택에 push
		> 현 위치에서 연결된 새로운 곳이 없으면 현 위치값(스택 상단값)을 pop한다.
		> 이미 push했다가 pop한 값은 다시 스택에 들어가지 않는다.

	=> BFS, DFS 사용 시 그래프에서 트리로 변환된다.


	<운영체제>
	- 리눅스 셸
		> 명령과 프로그램을 실행할 때 사용하는 인터페이스
		> 셸은 서버의 텍스트 모드처럼 명령을 입력하는 환경과 비슷
		> 우분투에서 기본적으로 사용하는 셸은 bash 셸이다.


	- bash의 특징
		> alias(명령 단축) 기능
		> 히스토리 기능(위/아래 방향키)
		> 연산 기능, Job Control 기능
		> 자동 이름 완성 기능(Tab), 프롬프트 제어 기능


	- bash 실행
		> 여러 환경 변수값을 불러올 수 있다.
		> 설정된 환경 변수는 echo $환경변수 명령으로 확인


	- bash 관련 실습
		# printenv(환경 변수들 목록 보여줌)
		# echo $USERNAME(사용자 이름 출력)
		# echo $LANG(현재 언어)

		# mkdir shellC(shellC 디렉토리 생성)
		# cd shellC
		# vi name.sh

		(셸 파일 내용)
		#! /bin/sh
		echo "사용자 이름 : " $USERNAME
		echo "호스트 이름 : " $HOSTNAME
		exit 0

		:wq(저장 후 vi 환경을 빠져나옴)
		# sh name.sh(방금 위에서 만든 셸 파일을 실행하는 명령어)
		# chmod 744 name.sh(바로 위의 sh 명령어가 아닌 사용자에게 실행 권한을 줌으로써 셸 파일을 실행시킴)
		# ./name.sh(현재 위치의 name.sh 실행, 위의 chmod로 권한을 변경했기 때문에 이렇게도 실행 가능)

		(예제 문제 : name.sh 파일의 내용을 언어, 경로, 히스토리 크기, 현재 위치값이 나오도록 수정)
		$LANG, $PATH, $HISTSIZE, $PWD 활용

		# export HISTSIZE=100(환경변수에 값 넣기 가능)
		# A=10
		# echo $A(위에서 지정한 10 값이 출력됨)
		# B=20
		# echo $B
		# C=`expr $A + $B`(계산한 값을 넣고 싶을 때 `expr ~` 를 사용, 값들 사이에 공백 넣어야 함)
		# echo $C(A와 B를 더한 30 값이 출력됨)
		(환경변수에 공백 포함 문자열 넣을 시 " " 사용)
		(환경변수 자체를 출력하고 싶으면 ' ' 사용)

		read A(A 환경변수의 값을 입력받을 수 있음)

		[ex1.sh]
		echo a값 입력:
		read a
		echo b값 입력:
		read b
		sum=`expr $a + $b`
		echo '$a + $b = ' $sum
		-> a와 b 환경변수값을 입력받아(read) sum 환경변수에 두 값을 더한 값을 넣음(expr), 그 후 출력

		multi=`expr $a \* $b`
		echo '$a * '$b' $multi
		-> 곱셈 계산, 위에서 계산했을 때에는 * 연산 앞에 \을 붙여 줬지만, 아래 echo문은 그냥 출력문이기에
		\ 없이 써준 것을 볼 수 있다.
		
		div=`expr \( $a + $b \) / 2`
		echo '( $a + $b ) / 2 = ' $div
		-> 나눗셈 계산, ( ) 괄호를 사용하기 위해 \ 를 써 줬다.



2. w3schools HTML Tutorial 문서 읽기
	HTML Form > HTML Form Attributes, Elements 문서 복습