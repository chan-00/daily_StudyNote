<2022.04.03일자 공부 기록>

1. 영단어 외우기
	similar - 비슷한, 유사한
	assimilate - 동화하다, 완전히 이해하다
	simulate - 가장하다, 모의실험을 하다
	simultaneous - 동시의
	resemble - 닮다, 유사하다
	assemble - 모으다, 조립하다
	society - 사회, 집단
	sociology - 사회학
	associate - 연상하다, 연관시키다, 어울리다
	solve - 해결하다, 풀다
	absolve - 무죄를 선고하다, 사면하다
	dissolve - 녹다, 용해[분해]하다, 끝내다
	resolve - 해결하다, 결심하다
	sophist - (고대 그리스의)학자, 궤변론자
	sophisticated - 세련된, 교양 있는, 정교한
	philosophy - 철학
	sophomore - 2학년
	sponsor - 후원자, 광고업체, 후원하다
	respond - 응답하다, 반응하다, 답장하다
	correspond - 일치하다, 상응하다, 서신을 주고받다
	spouse - 배우자
	sticker - 스티커
	sting - 찌르다, 따끔따끔하게 하다
	distinguish - 구별하다, 차이를 보이다
	extinguish - (불을)끄다, 끝내다
	instinct - 본능, 타고난 소질
	stimulus - 자극제, 자극, 흥분
	stitch - 바늘땀, 한 땀, 꿰매다


2. 학교공부 정리(파이썬 프로그래밍)
	- 1주차(OT)
	

	- 2주차
		1) !pip --version(파이썬 버전 보기)
	   	   !pip list(내 라이브러리 설치 현황 보기)

		2) 파이썬은 객체 지향 언어(인터프리터 언어)
			컴파일러 언어(C, C++ 등)는 한꺼번에 소스코드 번역, exe 파일 생성
			인터프리터 언어는 한 줄씩 바로 번역, exe 파일 생성X

		3) 상수는 한번 정해지면 바뀔 수 없는 고정값
			ex) 3, "Text" 등.....
			-> 이런 상수값들이 담기는 공간을 변수라고 한다.

		4) print로 여러 요소 출력은 ,(콤마)로 구분한다.
			ex) print(3, "Hello", "World!");

		5) 파이썬에서의 나누기 연산 -> 정수형 / 정수형 계산값은 실수형으로 자동 형변환되어 나옴.(C, C++ 등의 언어와 차이점을 보인다.)
			추가로 몫을 구하는 연산자는 //이다.
			ex) 100 // 30의 계산값은 3.

		6) print를 쓰지 않고도 변수 이름만 썼을 때 출력이 가능하지만, 마지막 것만 출력된다.

		7) 변수 자료형은 type(변수명) 함수를 사용하면 알 수 있다.

		8) 문자(문자열)는 덧셈(이어붙이기), 곱셈(반복) 연산이 가능하다.
			ex) "안녕" + "하세요" => "안녕하세요";
			     "안녕" * 3 => "안녕안녕안녕"
			-> 덧셈 연산은 문자열이 이어붙여지는 효과가 나타나고, 곱셈 연산은 해당 숫자만큼 문자열 반복 효과가 나타난다.
			     문자열 곱셈 연산에서 뒤에 숫자가 아닌 문자열 등의 값을 사용하면 오류가 나옴.

		9) 입력받는 함수 input() (C언어에서 scanf, C++에서 cin 과 같은 역할을 함.)
			ex) num2 = input();
			다만, input 함수로 입력받으면 반환되는 입력값이 문자열 형태이므로 입력값에 맞는 형변환이 필요하다.
			-> ex) num2 = int(input());

		10) print의 출력 형식
			ex) print(num1, "의 값은", num2, "입니다.");
			-> ,(콤마)를 사용하여 여러 요소 출력
			ex) print("%d의 값은 %d입니다."%(num1, num2));
			-> C언어와 같이 형식을 지정하여 출력하는 방법
			ex) print("{}의 값은 {} 입니다.".format(num1, num2));
			-> format 형식을 지정하여 값 출력.

		11) 문자열 인덱스 범위 지정
			ex) str = "Hello World";
			     str[2:6];
			-> 시작 인덱스값부터 종료 인덱스값 - 1 까지 출력하기 때문에 여기서의 출력값은 llo 가 될 것이다.(2~5 범위의 문자열 출력)

		12) 제곱 연산자(**) 사용 가능

		13) 대입 연산자의 다른 형태
			,(콤마)로 구분하여 여러 변수값을 한 번에 대입할 수 있다.
			ex) str1, str2 = "Hello", "World!";
			-> str1에 "Hello"가, str2에 "World!" 문자열이 각각 담기게 된다.


	- 3주차
		1) 문자와 문자열
			홑따옴표, 쌍따옴표, (여러 줄일 때)세 개의 따옴표 사용
	
		2) 문자열 슬라이싱
			ex) str[i : j : k]
			-> i는 시작, j는 종료, k는 건너뛰는 간격을 의미한다.
			(k 값을 음수로 주면 문자열 뒤쪽부터 슬라이싱 가능)

		3) 문자열 관련 함수들
			> upper(), lower()
			문자열을 대, 소문자로 변경

			> str.count("en");
			해당 문자열에 매개변수로 준 문자(문자열)의 갯수가 몇 개인지 셈.(없으면 0)

			> str.find("e", 3);
			문자열에 매개변수 문자가 어디에 있는지 인덱스값 반환(뒤의 매개변수는 시작 위치 지정, 지정 안 하면 0부터 시작)
			찾는 문자가 없으면 음수를 반환한다.

			> str.split(":");
			매개변수 문자(문자열)로 해당 문자열 분리, 분리된 문자열들은 리스트 형태로 반환된다.

			> str.replace("name", "Hello");
			해당 문자열에 첫 번째 매개변수 문자열이 있으면 두 번째 매개변수 문자열로 치환한다.

		4) 파이썬 조건식에서는 &&, || 대신 and, or 키워드로 사용된다.

		5) end=''
			print를 사용하면 다음의 print 내용은 자동 줄바뀜되어 출력되지만, print문의 뒤쪽에 end를 사용하면 줄바뀜 되지 않고 출력 가능.


	- 4주차
		1) 조건문, 반복문 등을 사용할 때는 들여쓰기를 잘 맞춰야 함.

		2) 반복문 for
			형식 : for 변수 in range(시작값, 끝값 + 1, 증감값):
			range 자리에는 리스트가 들어갈 수 있고, 리스트는 여러 자료형 포함 가능.

		3) while vs for
			> 둘 다 반복문이다.
			> for문은 횟수를 반복문에서 지정한다.
			> while은 횟수 반복을 하려면 반복문 안에 증감값, break 탈출문이 필요하다.
			> for는 횟수가 정해져 있는 상황, while은 그 외의 상황에 유효.(상황에 맞게 둘을 잘 활용하면 된다.)




3. 학교공부 정리(C++ 프로그래밍)
	- 1주차(OT)


	- 2주차
		1) C++ 언어 개발
			> 1980년대 초에 개발
			> C언어 기능을 유지, 확장한 것.
			> C언어에 클래스 개념, 가상 함수 등의 기능을 추가
			> 플랫폼에 의존적이거나 일반적이지 않은 특징 제거
		
		2) 구조화 프로그래밍
			> 무조건적인 점프 X(goto문 사용 등....)
			> 여전히 데이터와 알고리즘은 분리되어 있다.

		3) 객체지향 프로그래밍에서는 데이터와 알고리즘을 묶어 관리함.
			객체지향 -> 현실 세계의 요소들을 객체화함. => 코드의 재사용

		4) 객체지향 개념
			> 캡슐화(클래스 제작)

			> 정보 은닉(객체의 데이터를 외부에서 함부로 건드리지 못하게 함.)
			ex) private로 변수 보호.

			> 상속(클래스를 상속받으면 해당 클래스의 기능 사용 가능)
		
			> 다형성(하나의 함수or클래스를 다양하게 적용, 변경 가능)

		5) 동적할당
			new로 생성, delete로 사용한 공간 반납
			-> 동적할당한 후 사용한 공간을 delete로 처리하지 않으면 메모리 누수 현상 발생.


	- 3주차
		1) 객체(실제 세계 모델링, 소프트웨어 개발)
			> 객체는 상태와 동작 소유
			> 객체 상태 => 객체 특징값(속성)이다.(변수에 해당)
			> 객체 동작 => 객체가 취할 수 있는 동작(함수에 해당)

		2) 클래스
			> 객체를 만들 설계도 -> 이로 만들어지는 객체들.
			> 데이터와 함수를 하나의 덩어리로 묶음(캡슐화)
			> 클래스를 만들어두면 객체를 생성할 수 있다.


	- 4주차
		1) 클래스(객체의 설계도)
			> 멤버 변수(객체 속성) + 멤버 함수(객체 동작)으로 구성

		2) 추상화 : 문제 해결에 필요한 것 제외 삭제

		3) 객체는 하나의 데이터 타입처럼 취급
			ex) Car myCar; 또는 Car func() {} 등....

		4) 도트(.) 연산자 : 객체의 멤버에 접근하기 위한 연산자
		
		5) private(클래스 내부에서만 접근), public(클래스 외부에서도 접근) 접근 제어

		6) set, get 멤버변수 접근 함수(접근자, 설정자)(setNum, getNum 등....) 장점
			> 잘못된 값을 사전 차단한다.
			> 멤버 변수값이 필요할 때마다 계산, 반환한다.
			> 접근자만을 제공 -> 읽기만 가능한 멤버변수 생성

		7) 함수 오버로딩 알아두기
			> 매개변수의 개수 혹은 데이터형이 다르면 같은 함수명 사용 가능(중복 정의)
			> 오버로딩은 매개변수로만 판단, 함수의 반환형은 고려되지 않음.


	- 5주차
		1) 생성자와 생성자의 특징
			> 클래스 이름과 동일
			> 반환값 X
			> 반드시 public
			> 중복 정의 가능
		
		2) 생성자의 종류에는 공생성자(인수X, 디폴트 생성자), 인수가 있는 생성자가 있다.

		3) 소멸자
			> 클래스 이름에 ~가 붙음.
			> 값 반환X
			> public으로 선언
			> 매개 변수X
			> 중복 정의X

		4) 상수값(const) 초기화는 생성자의 : 변수 초기화 방식을 사용.
			ex) Car(): constNum(10) {}



4. 학교공부 정리(알고리즘)
	- 1주차
		1) 알고리즘 조건
			> 0개 이상 입력, 1개 이상 출력
			> 단순하고 모호하지 않은 단계
			> 한정 단계 후에는 종료
			> 모든 명령은 수행 가능
	
		2) 공간 복잡도
			> 실행에 필요한 저장 공간을 뜻함.
			> 동일 입출력 시 저장공간을 적게 쓸수록 좋음.

		3) 시간 복잡도
			> 실행에 걸리는 시간을 뜻함.
			> 동일 입출력 시 빠르면 좋음.
		=> 공간 복잡도보다 시간 복잡도가 더 중요.

		4) 시간 복잡도 측정
			> 알고리즘 직접 실행, 시간 측정 => 컴퓨터 성능 따라 차이 발생
			> 실행되는 알고리즘 연산 개수를 계산

		5) Big-O 표기법
			> 알고리즘 최악의 경우 연산 개수 n에 따른 측정 방법
			ex) 반복문(for)이 있으면 O(n), 이중 for문이 있으면 O(n의 2승)


	- 2주차, 3주차(실습 중심, 별찍기 알고리즘과 문자열 계산기 알고리즘 제작.)


	- 4주차
		1) 알고리즘은 정의되지 않음.
			> 분할정복, 동적 프로그래밍, 욕심쟁이(greedy) 방법 등이 있다.

		2) 분할정복
			> 하향식 접근 방법 -> 분할된 작은 문제들은 독립적
			> 큰 문제를 작은 문제들로 분할하여 생각
			ex) 이진탐색, 합병 정렬, 퀵 정렬, 선택 문제

		3) 동적 프로그래밍 방법
			> 상향식 접근 방법
			> 작은 문제들을 모두 해결, 결과를 이용하여 보다 큰 문제 해결
			> 작은 문제들은 독립적이지 않음(중복되는 부분 존재)
			ex) 피보나치 수열, 연쇄 행렬 곱셈 등.....

		=> 차이점(하향식 vs 상향식, 문제들끼리 독립적인가?)
			> 하향식 접근방법 -> 큰 문제 => 작은 문제1 + 작은 문제2 + .......
			> 상향식 접근방법 -> 작은 문제1 + 작은 문제2 + ...... = 큰 문제로 이어짐.

		4) 욕심쟁이(greedy) 방법
			> 동적 프로그래밍 -> 항상 전체적인 최적해를 구함.
			> 욕심쟁이 방법 -> 소문제 각 단계에서의 최적해를 구함.
			(욕심쟁이 방법은 전체적인 최적해를 못 구할 수도 있음.)

		5) 분할정복 방법 특징
			> 분할된 작은 문제는 입력크기만 작아지고 원 문제와 동일
			> 분할 -> 정복 -> 단계

		6) 재귀함수(분할정복의 일부)
			> 자기 자신을 호출하는 함수
			> 재귀함수 종료 조건과 호출 조건이 꼭 있어야 함!


	- 5주차
		1) 정렬 Sort
			> 주어진 데이터를 일정 규칙에 따라 다시 나열(오름차순 또는 내림차순)
		
		2) 버블 정렬(간단하지만 성능 낮음)
			> 인접 2개씩 비교
			> 한 번 정렬할 때 맨 마지막 원소가 결정된다.

		3) 버블 정렬 특징
			> 안정적 알고리즘(한 번 자리가 확정되면 바뀌지 않음), 제자리 알고리즘(입력공간 이외 별도 메모리 X)
			> 최악의 경우 O(n의 2승) 실행시간

		4) 삽입 정렬
			> 미정렬 부분의 첫 번째 원소로부터 정렬된 부분의 제자리에 삽입
			> 최악의 경우 O(n의 2승) 실행시간
		
		5) 선택 정렬(자리 교환이 위의 두 정렬보다 적게 일어남.)
			> 미정렬 데이터 중 가장 작은 것 선택, 그 데이터를 미정렬 데이터 첫 번째 원소와 교환하는 과정 반복
			> 최악의 경우 O(n의 2승) 실행시간
			> 안정적/불안정적 알고리즘(한 번 위치가 정해진 후에도 위치가 계속 바뀔 수 있기 때문.)
			